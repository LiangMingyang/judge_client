// Generated by CoffeeScript 1.9.3
(function() {
  var async, child_process, crypto, data_root, fs, http, io, judge_client, log, myJudge, path, querystring, resource_dir, ss, test_script_path;

  io = require('socket.io-client');

  crypto = require('crypto');

  async = require('async');

  log = require('./log');

  child_process = require('child_process');

  ss = require('socket.io-stream');

  path = require('path');

  fs = require('fs');

  http = require('http');

  querystring = require('querystring');

  resource_dir = "/resource";

  test_script_path = path.join(__dirname, "/judge_script.py");

  data_root = '/usr/share/oj4th';

  judge_client = (function() {
    var self;

    self = void 0;

    function judge_client(data) {
      var ele, i, len, ref;
      this.name = data.name;
      this.id = data.id;
      this.tmpfs_size = data.tmpfs_size || 500;
      this.cpu_mask = 0;
      if (data.cpu) {
        ref = data.cup;
        for (i = 0, len = ref.length; i < len; i++) {
          ele = ref[i];
          this.cpu_mask += 1 << ele;
        }
      }
      this.task = void 0;
      this.secret_key = data.secret_key;
      this.create_time = data.create_time;
      this.log = new log(data.log_path);
      this.config = JSON.stringify(data);
      this.status = void 0;
      this.host = data.host;
      self = this;
    }

    judge_client.prototype.send = function(url, form) {
      var options, postData, post_time, req;
      if (form == null) {
        form = {};
      }
      post_time = new Date().toISOString();
      form.judge = {
        name: self.name,
        post_time: new Date(),
        token: crypto.createHash('sha1').update(self.secret_key + '$' + post_time).digest('hex')
      };
      postData = querystring.stringify(form);
      options = {
        hostname: self.host,
        port: 3000,
        path: url,
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': postData.length
        }
      };
      req = http.request(options, function(res) {
        res.setEncoding('utf8');
        self.task = "";
        res.on('data', function(chunk) {
          return self.task += chunk;
        });
        return res.on('end', function() {
          self.task = JSON.parse(self.task);
          return console.log(self.task.test_setting);
        });
      });
      req.on('error', function(e) {
        return console.log('problem with request: ' + e.message);
      });
      req.write(postData);
      return req.end();
    };

    return judge_client;

  })();

  myJudge = new judge_client({
    host: '127.0.0.1'
  });

  myJudge.send('/judge/task');

}).call(this);

//# sourceMappingURL=judge_client_new.js.map
