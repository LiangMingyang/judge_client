// Generated by CoffeeScript 1.9.3
(function() {
  var FILE_PAGE, Promise, TASK_PAGE, URL, child_process, crypto, data_root, fs, judge_client, log, path, resource_dir, rp, test_script_path;

  crypto = require('crypto');

  log = require('./log');

  path = require('path');

  Promise = require('bluebird');

  rp = require('request-promise');

  URL = require('url');

  fs = Promise.promisifyAll(require('fs'), {
    suffix: 'Promised'
  });

  child_process = require('child-process-promise');

  resource_dir = "/resource";

  test_script_path = path.join(__dirname, "/judge_script.py");

  data_root = '/usr/share/oj4th';

  TASK_PAGE = '/judge/task';

  FILE_PAGE = '/judge/file';

  judge_client = (function() {
    var promiseWhile, self;

    self = void 0;

    promiseWhile = function(action) {
      var my_loop, resolver;
      resolver = Promise.defer();
      my_loop = function() {
        if (self.isStopped) {
          return resolver.resolve();
        }
        return Promise.cast(action()).then(my_loop)["catch"](resolver.reject);
      };
      process.nextTick(my_loop);
      return resolver.promise;
    };

    function judge_client(data) {
      var ele, j, len, ref;
      this.name = data.name;
      this.id = data.id;
      this.tmpfs_size = data.tmpfs_size || 500;
      this.cpu_mask = 0;
      if (data.cpu) {
        ref = data.cpu;
        for (j = 0, len = ref.length; j < len; j++) {
          ele = ref[j];
          this.cpu_mask += 1 << ele;
        }
      }
      this.task = void 0;
      this.secret_key = data.secret_key;
      this.create_time = data.create_time;
      this.log = new log(data.log_path);
      this.config = JSON.stringify(data);
      this.status = void 0;
      this.host = data.host;
      this.isStopped = false;
      self = this;
    }

    judge_client.prototype.send = function(url, form) {
      var post_time;
      if (form == null) {
        form = {};
      }
      post_time = new Date().toISOString();
      form.judge = {
        name: self.name,
        post_time: new Date(),
        token: crypto.createHash('sha1').update(self.secret_key + '$' + post_time).digest('hex')
      };
      return rp.post(URL.resolve(self.host, url), {
        json: form
      });
    };

    judge_client.prototype.getTask = function() {
      return self.send(TASK_PAGE);
    };

    judge_client.prototype.extract_file = function(file_path) {
      return child_process.spawn('python', ['./judge.py', 'resource', self.id, self.tmpfs_size, self.cpu_mask, file_path], {
        stdio: 'inherit'
      });
    };

    judge_client.prototype.pre_env = function() {
      return child_process.spawn('python', ['./judge.py', 'clean_all', self.id, self.tmpfs_size, self.cpu_mask], {
        stdio: 'inherit'
      }).then(function() {
        return console.log("Pre_env finished");
      });
    };

    judge_client.prototype.pre_submission = function() {
      var data, i, inputFiles, outputFiles, test_setting, weights;
      test_setting = "";
      for (i in self.task.manifest.test_setting) {
        if (self.task.manifest.test_setting[i] instanceof Array) {
          test_setting += i + " = " + (self.task.manifest.test_setting[i].join(',')) + "\n";
        } else {
          test_setting += i + " = " + self.task.manifest.test_setting[i] + "\n";
        }
      }
      inputFiles = (function() {
        var j, len, ref, results;
        ref = self.task.manifest.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          data = ref[j];
          results.push(data.input);
        }
        return results;
      })();
      outputFiles = (function() {
        var j, len, ref, results;
        ref = self.task.manifest.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          data = ref[j];
          results.push(data.output);
        }
        return results;
      })();
      weights = (function() {
        var j, len, ref, results;
        ref = self.task.manifest.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          data = ref[j];
          results.push(data.weight);
        }
        return results;
      })();
      test_setting += "standard_input_files = " + (inputFiles.join(',')) + "\n";
      test_setting += "standard_output_files = " + (outputFiles.join(',')) + "\n";
      test_setting += "round_weight = " + (weights.join(',')) + "\n";
      test_setting += "test_round_count = " + self.task.manifest.data.length + "\n";
      return child_process.spawn('python', ['./judge.py', 'prepare', self.id, self.tmpfs_size, self.cpu_mask, self.task.submission_code.content, self.task.lang, test_setting, test_script_path], {
        stdio: 'inherit'
      }).then(function() {
        return console.log("Pre_submission finished");
      });
    };

    judge_client.prototype.get_file = function(file_path) {
      console.log(file_path);
      return self.send(FILE_PAGE, {
        problem_id: self.task.problem_id,
        filename: self.task.manifest.test_setting.data_file
      }).pipe(fs.createWriteStream(file_path));
    };

    judge_client.prototype.pre_file = function() {
      var file_path;
      file_path = path.join(__dirname, resource_dir, self.task.manifest.test_setting.data_file);
      return Promise.resolve().then(function() {
        if (!fs.existsSyncPromised(file_path)) {
          return self.get_file(file_path);
        }
      }).then(function() {
        return self.extract_file(file_path);
      }).then(function() {
        return console.log("Pre_file finished");
      });
    };

    judge_client.prototype.prepare = function() {
      return Promise.resolve().then(function() {
        return self.pre_env();
      }).then(function() {
        return self.pre_submission();
      }).then(function() {
        return self.pre_file();
      }).then(function() {
        return self.task;
      });
    };

    judge_client.prototype.judge = function() {
      return child_process.spawn('python', ['./judge.py', 'judge', self.id, self.tmpfs_size, self.cpu_mask], {
        stdio: 'inherit'
      }).then(function() {
        return self.task;
      });
    };

    judge_client.prototype.report = function() {
      return fs.readFilePromised(path.join(data_root, 'work_' + self.id, '__report__')).then(function(data) {
        var detail, dictionary, memory_cost, report, result, result_list, score, time_cost;
        detail = data.toString().split('\n');
        result_list = detail.shift().split(',');
        score = result_list[0];
        time_cost = result_list[1];
        memory_cost = result_list[2];
        result = detail.shift();
        detail = detail.join('\n');
        dictionary = {
          "Accepted": "AC",
          "Wrong Answer": "WA",
          "Compiler Error": "CE",
          "Runtime Error (SIGSEGV)": "RE",
          "Presentation Error": "PE",
          "Memory Limit Exceed": "MLE",
          "Time Limit Exceed": "TLE"
        };
        console.log(result);
        report = {
          submission_id: self.task.id,
          score: score,
          time_cost: time_cost,
          memory_cost: memory_cost,
          result: dictionary[result],
          detail: detail
        };
        console.log(report);
        return self.send('/judge/report', report);
      });
    };

    judge_client.prototype.work = function() {
      return Promise.resolve().then(function() {
        return self.getTask();
      }).then(function(task) {
        if (!task) {
          throw new Error("No task");
        }
        console.log(task);
        self.task = task;
        return self.prepare();
      }).then(function() {
        return self.judge();
      }).then(function() {
        return self.report();
      })["catch"](function(err) {
        console.log(err.message);
        return Promise.delay(2000);
      });
    };

    judge_client.prototype.init = function() {
      return child_process.spawn('python', ['./judge.py', 'mount', self.id, self.tmpfs_size, self.cpu_mask], {
        stdio: 'inherit'
      }).then(function() {
        return console.log("Mount finished");
      }).then(function() {
        return self.start();
      })["catch"](function(err) {
        return console.log(err);
      });
    };

    judge_client.prototype.stop = function() {
      return self.isStopped = true;
    };

    judge_client.prototype.start = function() {
      self.isStopped = false;
      return promiseWhile(self.work).then(function() {
        return child_process.spawn('python', ['./judge.py', 'umount', self.id, self.tmpfs_size, self.cpu_mask], {
          stdio: 'inherit'
        });
      })["catch"](function(err) {
        return console.log(err);
      });
    };

    return judge_client;

  })();

  module.exports = judge_client;

}).call(this);

//# sourceMappingURL=judge_client_new.js.map
